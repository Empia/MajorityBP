  * Space
  * * SubBrick 
  * * Refactor old elements
  * main.scala.bprocesses.dim_run Refactor
  * main.scala.bprocesses.isFront 
  * main.scala.bprocesses.Invoke FIX THAT



  * main.scala.utils.LinkContainer || Make plural/singular link
  [* Multiple parrams         isList

  * main.scala.maps.FrameLink ctx-ctx links
  * * Assembly Function [ Provide access to triple (object, params, arguments)] 1. req(el, in), assebmly(frame), running
  * * main.scala.utils.Space || Make support for frame
  * * * [* CHAIN Invoke -> Process -> Process ]


<DB>
  * Slick integration
  * DB Scheme
  * API End-Point
  * Angular app
  * придумал решение, при defining классов для различных элементов, регистрировать их имя и ссылку в общий хэш // elements_tracer
  * ResAct blocks
  * Collection
  * Invoke card(Reporter)
  
  * Resources 
  || Employees, Clients, Groups 
  
  * Condition
  * Return in ProcElems [ Block that return blocks and arg&params ]



  /** 2 Books read **/
  http://www.mulesoft.com/platform/soa
  http://www.activiti.org/userguide/index.html#bpmnSequenceFlow
  http://www.activiti.org/userguide/index.html#bpmnTask
  http://www.activiti.org/userguide/index.html#bpmnGateways
  http://www.activiti.org/userguide/index.html#bpmnSubprocessAndCallActivity


____
  * Create test
  * checker for arguments and params [ ]
  || Process owning, viewers, access // by owning tables Employees/Clients/Firm + Groups assigns
  * Datablock?
  * scope ctx, bp ?
  * Input block while proc/context running(wait for input if it paused)
  * Flow tracker
  * Return in BProcess  [ Blocks that comes after process invoked ]
  * Collab & sharing
  * Graph.js
/Final/
  * Link block[Input, return, ...]
  * K-V Properties for resources
  * Observer block http://www.activiti.org/userguide/index.html#bpmnEvents
  * Triggers(that runs something just from template and request[POST /auth/token?acton=...])

  * Merchant?
  * Bridge
  * Behav Resources
  * Behav model methods and elements
  * Templates BP, ctx, sbj?
  * Neo4J integration?
  * Document block
  * Complex block
  * Block register / Elem -> Block conversion
  * Sandbox for testing external Blocks
  * Service
  * RPC
  * Zappier
  * Regressor-core
