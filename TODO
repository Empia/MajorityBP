** Invoke clean && run_dim && push to station, logger
* extender
* Collection
* ElementTracer при defining классов для различных элементов, регистрировать их имя и ссылку в общий хэш
    scala>  trait Processor; class P1 extends Processor; class P2 extends Processor

    scala> case class Event(val seq:Seq[Class[_ <: Processor]])
    defined class Event

    scala> Event(List(classOf[P1],classOf[P2]))
    res4: Event = Event(List(class P1, class P2))

    scala> res4.seq map { _.newInstance }
    res6: Seq[Processor] = List(P1@43655bee, P2@337688d3)

* Resources 
|| Employees, Clients, Groups 
** ResAct blocks
** Databrick pointers


<DB>
  || Process owning, viewers, access // by owning tables Employees/Clients/Firm + Groups assigns
  * scope ctx, bp

  * Slick integration
  * DB Scheme
  * API End-Point
  * Angular app
  /** 2 Books read **/
    http://www.mulesoft.com/platform/soa
    http://www.activiti.org/userguide/index.html#bpmnSequenceFlow
    http://www.activiti.org/userguide/index.html#bpmnTask
    http://www.activiti.org/userguide/index.html#bpmnGateways
    http://www.activiti.org/userguide/index.html#bpmnSubprocessAndCallActivity


____
  ** Condition
  * error handling [checker before invoke, brick error - though invoking] /isOptionalLink/* checker for arguments and params [ ]
  * Create test


  * main.scala.maps.FrameLink ctx-ctx links
  ** main.scala.utils.Space || Make support for frame elements
  * Assembly Function [ Provide access to triple (object, params, arguments)] 1. req(el, in), assebmly(frame), running
  ** [* CHAIN Invoke -> Process -> Process ]
  * Brick add space automaticly (if is needed)
  ** Input block while proc/context running(wait for input if it paused)

  * Return in BProcess  [ Blocks that comes after process invoked ]
  * Return in ProcElems [ Block that return blocks and arg&params ] Brick expander adj by subbricks
  * Graph.js


/Final/
  * Collab & sharing
  * Link block[Input, return, ...]
  * K-V Properties for resources
  * Observer block http://www.activiti.org/userguide/index.html#bpmnEvents
  * Triggers(that runs something just from template and request[POST /auth/token?acton=...])

  * Merchant?
  * Bridge
  * Behav Resources
  * Behav model methods and elements
  * Templates BP, ctx, sbj?
  * Neo4J integration?
  * Document block
  * Complex block
  * Block register / Elem -> Block conversion
  * Sandbox for testing external Blocks
  * Service
  * RPC
  * Zappier
  * Regressor-core
