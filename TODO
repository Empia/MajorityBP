  /** 2 Books read **/
  * Slick integration
  * DB Scheme
  * API End-Point
  * Angular app
  * Resources 
  || Employees, Clients, Groups 
  || Process owning, viewers, access
  * ResAct blocks - optional (nff)
  * Collab & sharing?

  [* Multiple parrams         isList
  [* Condition multiple args  isList


  * Graph.js
  * Invoke card(Reporter)
  [* CHAIN Invoke -> Process -> Process ]
  * Assembly [ Provide access to triple (object, params, arguments)] 1. req(el, in), assebmly(frame), running
  * Input block while proc/context running(wait for input if it paused)
  * Return in ProcElems [ Block that return blocks and arg&params ]
  * Return in BProcess  [ Blocks that comes after process invoked ]
  * Link block[Input, return, ...]

____
/Final/

  * Observer block
  * Merchant?
  * Datablock?
  * Bridge
  * Fully featured Resources
  * Behav Resources
  * Behav model methods and elements
  * Templates BP, ctx, sbj?
  * Neo4J integration?
  * scope ctx, bp ?
  * Complex block
  * Block register / Elem -> Block conversion
  * Sandbox for testing external Blocks
  * Service
  * RPC
  * Regressor-core
  * Zappier
